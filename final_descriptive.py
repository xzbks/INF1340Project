# -*- coding: utf-8 -*-
"""Final descriptive

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jCMcgRxw8jAb2goGYbExYN2cFSSkGcLp
"""

# Descriptive analytics
import numpy as np
import pandas as pd

# Task 1
data = pd.read_csv("cleaned_data_final.csv", index_col='Country')
pd.set_option('display.max_columns', None)
# Head for df
print(data.head(10))
# Provide the types for df
print(data.dtypes)
# Summary statistic for df, except Country and HDI rank
print(data.drop('HDI Rank', axis = 1).describe())

# Task 2
# For columns, create histograms
data[['Human Development Index (HDI)']].plot(kind='hist', title = 'HDI histogram')
data[['Life expectancy at birth']].plot(kind='hist', title = 'Life expectancy histogram')
data[['Expected years of schooling']].plot(kind='hist', title = 'Expected schooling year histogram')
data[['Mean years of schooling']].plot(kind='hist', title = 'Mean schooling year histogram')
data[['Gross national income (GNI) per capita']].plot(kind='hist', title = 'GNI per capita histogram')
data[['GNI per capita rank minus HDI rank']].plot(kind='hist', title = 'GNI per capita-HDI rank histogram')

# By sorting values to figure out which country has the highest and lowest value
print(data['Human Development Index (HDI)'].sort_values())
print(data['GNI per capita rank minus HDI rank'].sort_values())
print(data['Life expectancy at birth'].sort_values())
print(data['Expected years of schooling'].sort_values())
print(data['Mean years of schooling'].sort_values())
print(data['Gross national income (GNI) per capita'].sort_values())

# Task 3
# Part of data distribution
import matplotlib.pyplot as plt
import scipy.stats as stats
# Plotting the histogram
plt.figure(figsize=(12, 6))
plt.hist(data['Human Development Index (HDI)'], bins=20,
edgecolor='black')
plt.title('Distribution of Human Development Index (HDI) Values')
plt.xlabel('Human Development Index (HDI)')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()
# Creating the Q-Q plot
plt.figure(figsize=(8, 6))
stats.probplot(data['Human Development Index (HDI)'], dist="norm",
plot=plt)
plt.title('Q-Q Plot for HDI Value')
plt.show()
# Calculating and printing skewness and kurtosis
skewness = data['Human Development Index (HDI)'].skew()
kurtosis = data['Human Development Index (HDI)'].kurtosis()
# Shapiro-Wilk Test for normality
shapiro_test = stats.shapiro(data['Human Development Index (HDI)'])
# Printing skewness, kurtosis, and Shapiro-Wilk Test result
print(f"Skewness: {skewness}")
print(f"Kurtosis: {kurtosis}")
print(f"Shapiro-Wilk Test: W={shapiro_test.statistic}, pvalue={shapiro_test.pvalue}")

#Task4: Boxplots and outliers for variables

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns


# Setting up the figure size for each box plot
fig_size = (6, 4)

# Create the box plot for the Human Development Index (HDI)
# the new figure for the specified size
plt.figure(figsize=fig_size)
# the box plot created by the seaborn, which will automatically add the outliers
sns.boxplot(data= data, y='Human Development Index (HDI)')
# write the tittle for the box plot
plt.title('Box Plot of Human Development Index (HDI)')
#displaying the polot on the screen
plt.show()

# create a box plot for Life expectancy at birth
plt.figure(figsize=fig_size)
sns.boxplot(data=data, y='Life expectancy at birth')
plt.title('Box Plot of Life expectancy at birth')
plt.show()

# create a box plot for Expected years of schooling
plt.figure(figsize=fig_size)
sns.boxplot(data=data, y='Expected years of schooling')
plt.title('Box Plot of Expected years of schooling')
plt.show()

# create a box plot for Mean years of schooling
plt.figure(figsize=fig_size)
sns.boxplot(data=data, y='Mean years of schooling')
plt.title('Box Plot of Mean years of schooling')
plt.show()

# create a box plot for Gross national income (GNI) per capita
plt.figure(figsize=fig_size)
sns.boxplot(data=data, y='Gross national income (GNI) per capita')
plt.title('Box Plot of Gross national income (GNI) per capita')
plt.show()

#Task5: sorting and ranking
#sort the countries with different income groups
data.reset_index(inplace = True)
# Assigning income groups based on GNI per Capita
data['Income Group'] = ['High' if gni > 50000 else 'Middle' if gni > 20000 else 'Low' for gni in data['Gross national income (GNI) per capita']]

# Create an empty DataFrame to store the sorted data
sorted_data = pd.DataFrame(data)

# List of unique income groups
income_groups = data['Income Group'].unique()

# Iterate through income groups
for income_group in income_groups:
    # Filter data for the current income group
    income_group_data = data[data['Income Group'] == income_group]

    # Sort the data within the income group by HDI in descending order
    sorted_income_group_data = income_group_data.sort_values('Human Development Index (HDI)', ascending=False)

    # Append the sorted data to the result DataFrame
    sorted_data = pd.concat([sorted_data, sorted_income_group_data], ignore_index=True)

# Resetting index without adding it as a column
sorted_data.reset_index(drop=True, inplace=True)

# Extracting the HDI Rank, Country Name, and Income Group for the top 10 countries in each income group
top_10_high_income = sorted_data[sorted_data['Income Group'] == 'High'][['HDI Rank', 'Country', 'Income Group']].head(10)
top_10_middle_income = sorted_data[sorted_data['Income Group'] == 'Middle'][['HDI Rank', 'Country', 'Income Group']].head(10)
top_10_low_income = sorted_data[sorted_data['Income Group'] == 'Low'][['HDI Rank', 'Country', 'Income Group']].head(10)

# Convert DataFrames to strings without index
top_10_high_income_info = top_10_high_income.to_string(index=False)
top_10_middle_income_info = top_10_middle_income.to_string(index=False)
top_10_low_income_info = top_10_low_income.to_string(index=False)

# Print the results
print("Top 10 High Income Group:")
print(top_10_high_income_info)
print("\nTop 10 Middle Income Group:")
print(top_10_middle_income_info)
print("\nTop 10 Low Income Group:")
print(top_10_low_income_info)