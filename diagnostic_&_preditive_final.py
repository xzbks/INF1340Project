# -*- coding: utf-8 -*-
"""Diagnostic & Preditive final

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Fi912UvxnMUubvnqcYLLVuKmA78F29DY
"""

# Diagnostic Analytic
# Task 1: For the top 10 countries in each group, find out the similarities. Are they similar in HDI, life expectancy, etc
import pandas as pd

# Load the dataset from the provided CSV file path
csv_file_path = 'cleaned_data_final.csv'
data = pd.read_csv(csv_file_path)

# Assign income groups based on GNI per Capita
data['Income Group'] = ['High' if gni > 50000 else 'Middle' if gni > 20000 else 'Low' for gni in data['Gross national income (GNI) per capita']]

# Sort data within each income group by HDI in descending order
sorted_data = data.sort_values(['Income Group', 'Human Development Index (HDI)'], ascending=[True, False])

# Function to calculate mean, standard deviation, and range for the top 10 countries in each group
def calculate_top10_statistics(income_grouped_data):
    statistics = {}
    for group in ['High', 'Middle', 'Low']:
        income_group_data = income_grouped_data[income_grouped_data['Income Group'] == group].head(10)
        stats = {}
        for column in ['Human Development Index (HDI)', 'Life expectancy at birth',
                       'Expected years of schooling', 'Mean years of schooling',  # Corrected column name
                       'Gross national income (GNI) per capita']:
            stats[column] = {
                'Mean': income_group_data[column].mean(),
                'Std': income_group_data[column].std(),
                'Range': income_group_data[column].max() - income_group_data[column].min()
            }
        statistics[group] = stats
    return statistics

# Calculate statistics for the top 10 countries in each income group
top10_countries_statistics = calculate_top10_statistics(sorted_data)

# Convert the list of dictionaries to a DataFrame for well-structured display
stats_df = pd.DataFrame(top10_countries_statistics)

# Display the DataFrame containing the statistics for each income group
stats_df

#Task 2: Where are the Outliers from, and which countries? Why is this happening? Do they have any other similarities? (GNI rank and HDI rank
# List of variables for finding outliers
variables_to_find_outliers = [
    "Human Development Index (HDI)",
    "Life expectancy at birth",
    "Expected years of schooling",
    "Mean years of schooling",
    "Gross national income (GNI) per capita"
]

# Function to find outliers using the Interquartile Range (IQR) method
def find_outliers(data, column):
    # Calculate the first and third quartile (25th and 75th percentiles)
    Q1 = data[column].quantile(0.25)
    Q3 = data[column].quantile(0.75)
    # Interquartile range
    IQR = Q3 - Q1

    # Determine the outliers with outside of Q1 - 1.5*IQR and Q3 + 1.5*IQR
    outliers_cap = (data[column] < (Q1 - 1.5 * IQR)) | (data[column] > (Q3 + 1.5 * IQR))
    return data[outliers_cap]

# Loop through each variable and disolay the result
for variable in variables_to_find_outliers:
    outliers = find_outliers(data, variable)
    print(f"Outliers in {variable}:")

    if not outliers.empty:
        # Display each outlier's country, GNI rank, and HDI rank
        for index, row in outliers.iterrows():
            country = row['Country']
            gni_rank = row['GNI per capita rank minus HDI rank'] + row['HDI Rank']
            hdi_rank = row['HDI Rank']
            print(f"  Country: {country}, GNI Rank: {gni_rank}, HDI Rank: {hdi_rank}")
    else:
        print("  No outliers found.")

    print()  # Add an empty line for better readability between variables

#Task 3: Correlation analysis

# List of variables for finding correlations with HDI
columns_for_analysis = [
    'Human Development Index (HDI)',
    'Life expectancy at birth',
    'Expected years of schooling',
    'Mean years of schooling',
    'Gross national income (GNI) per capita'
]

# Calculating the correlation matrix
correlation_matrix = data[columns_for_analysis].corr()

# Getting the correlation of other variables with HDI
hdi_correlation = correlation_matrix['Human Development Index (HDI)']

# Displaying the correlations of other variables with HDI
print(hdi_correlation)

# Task 4
# Calculate ranks for 'Life expectancy at birth' and 'Mean years of schooling'
data['Life Expectancy Rank'] = data['Life expectancy at birth'].rank(ascending=False)
data['Mean Schooling Rank'] = data['Mean years of schooling'].rank(ascending=False)

# Calculate the difference between these ranks and HDI rank
data['Life Expectancy Rank - HDI Rank'] = data['Life Expectancy Rank'] - data['HDI Rank']
data['Mean Schooling Rank - HDI Rank'] = data['Mean Schooling Rank'] - data['HDI Rank']

# Task 5:
# Define the quantile thresholds for HDI, life expectancy, and mean years of schooling
hdi_quantiles = data['Human Development Index (HDI)'].quantile([0.25, 0.50, 0.75])
life_expectancy_quantiles = data['Life expectancy at birth'].quantile([0.25, 0.50, 0.75])
schooling_quantiles = data['Mean years of schooling'].quantile([0.25, 0.50, 0.75])

# Map categories based on these quantiles
data['HDI Category'] = pd.cut(data['Human Development Index (HDI)'],
                              bins=[0, hdi_quantiles[0.25], hdi_quantiles[0.50], hdi_quantiles[0.75], 1],
                              labels=['Low', 'Medium', 'High', 'Very High'])
data['Life Expectancy Category'] = pd.cut(data['Life expectancy at birth'],
                                          bins=[0, life_expectancy_quantiles[0.25], life_expectancy_quantiles[0.50], life_expectancy_quantiles[0.75], data['Life expectancy at birth'].max()],
                                          labels=['Low', 'Medium', 'High', 'Very High'])
data['Mean Schooling Category'] = pd.cut(data['Mean years of schooling'],
                                         bins=[0, schooling_quantiles[0.25], schooling_quantiles[0.50], schooling_quantiles[0.75], data['Mean years of schooling'].max()],
                                         labels=['Low', 'Medium', 'High', 'Very High'])

# Creating the comparison frame
comparison_frame = data[['Country', 'Human Development Index (HDI)',
                         'Life expectancy at birth', 'Mean years of schooling',
                         'Gross national income (GNI) per capita',
                         'HDI Rank', 'Life Expectancy Rank', 'Mean Schooling Rank',
                         'Life Expectancy Rank - HDI Rank', 'Mean Schooling Rank - HDI Rank',
                         'GNI per capita rank minus HDI rank',
                         'HDI Category', 'Life Expectancy Category', 'Mean Schooling Category']]

# Display the first few rows of this comparison frame
comparison_frame.head()

# Task 6
from sklearn.linear_model import LinearRegression
import numpy as np
import matplotlib.pyplot as plt
# The independent variables we need are 'Life expectancy at birth',
# 'Expected years of schooling', 'Mean years of schooling',
# 'Gross national income (GNI) per capita'
x1 = data[['Life expectancy at birth']].values.reshape(-1, 1)
y = data['Human Development Index (HDI)']
model1 = LinearRegression().fit(x1, y)
# Plotting for Life expectancy at birth
r_sq = model1.score(x1, y)
print('coefficient of determination:', r_sq)
# Print the Intercept:
print('intercept:', model1.intercept_)
# Print the Slope:
print('slope:', model1.coef_)
plt.scatter(x1, y)
plt.title('HDI ~ Life Expectancy at Birth')
plt.xlabel('Life Expectancy at Birth')
plt.ylabel('Human Development Index (HDI)')
plt.show()

# For Expected years of schooling
x2 = data[['Expected years of schooling']].values.reshape(-1, 1)
model2 = LinearRegression().fit(x2, y)
r_sq2 = model2.score(x2, y)
print('coefficient of determination:', r_sq2)
# Print the Intercept:
print('intercept:', model2.intercept_)
# Print the Slope:
print('slope:', model2.coef_)
plt.scatter(x2, y)
plt.title('HDI ~ Expected years of schooling')
plt.xlabel('Expected years of schooling')
plt.ylabel('Human Development Index (HDI)')
plt.show()

# For Mean years of schooling
x3 = data[['Mean years of schooling']].values.reshape(-1, 1)
model3 = LinearRegression().fit(x3, y)
r_sq3 = model3.score(x3, y)
print('coefficient of determination:', r_sq3)
# Print the Intercept:
print('intercept:', model3.intercept_)
# Print the Slope:
print('slope:', model3.coef_)
plt.scatter(x3, y)
plt.title('HDI ~ Mean years of schooling')
plt.xlabel('Mean years of schooling')
plt.ylabel('Human Development Index (HDI)')
plt.show()

# For Gross national income (GNI) per capita
x4 = data[['Gross national income (GNI) per capita']].values.reshape(-1, 1)
model4 = LinearRegression().fit(x4, y)
r_sq4 = model4.score(x4, y)
print('coefficient of determination:', r_sq4)
# Print the Intercept:
print('intercept:', model4.intercept_)
# Print the Slope:
print('slope:', model4.coef_)
plt.scatter(x4, y)
plt.title('HDI ~ Gross national income (GNI) per capita')
plt.xlabel('Gross national income (GNI) per capita')
plt.ylabel('Human Development Index (HDI)')
plt.show()

# Now run a multiple linear regression
x = data[['Life expectancy at birth', 'Expected years of schooling',
'Mean years of schooling', 'Gross national income (GNI) per capita']]
model5 = LinearRegression().fit(x, y)
r_sq5 = model5.score(x, y)
print('coefficient of determination:', r_sq5)
# Print the Intercept:
print('intercept:', model5.intercept_)
# Print the Slope:
print('slope:', model5.coef_)

# Predictive analytics
# We are going to apply model validating to get the best predictive model
# using train-test model
from sklearn.model_selection import train_test_split
# Now we are going it for model5, the multiple linear regression
# Split to 25% test data and 75% train data
x_train, x_test, y_train,y_test = train_test_split(x, y, test_size =0.25, random_state=1)
x_train
model5_split = LinearRegression()
print(model5_split.fit(x_train, y_train))
# Predict the output by passing the x_test variable
y_pred = model5_split.predict(x_test)
print('The HDI values predicted by the model by passing the x_test variable:', y_pred)
print('The R square is:', model5_split.score(x_test,y_test))

# Now we are going it for model1,
# Split to 25% test data and 75% train data
x1_train, x1_test, y_train,y_test = train_test_split(x1, y, test_size =0.25, random_state=1)
x1_train
model1_split = LinearRegression()
print(model1_split.fit(x1_train, y_train))
# Predict the output by passing the x_test variable
y1_pred = model1_split.predict(x1_test)
print('The HDI values predicted by the model by passing the x_test variable:', y1_pred)
print('The R square is:', model1_split.score(x1_test,y_test))

# Now we are going it for model2,
# Split to 25% test data and 75% train data
x2_train, x2_test, y_train,y_test = train_test_split(x2, y, test_size =0.25, random_state=1)
x2_train
model2_split = LinearRegression()
print(model2_split.fit(x2_train, y_train))
# Predict the output by passing the x_test variable
y2_pred = model1_split.predict(x2_test)
print('The HDI values predicted by the model by passing the x_test variable:', y2_pred)
print('The R square is:', model2_split.score(x2_test,y_test))

# Now we are going it for model3,
# Split to 25% test data and 75% train data
x3_train, x3_test, y_train,y_test = train_test_split(x3, y, test_size =0.25, random_state=1)
x3_train
model3_split = LinearRegression()
print(model3_split.fit(x3_train, y_train))
# Predict the output by passing the x_test variable
y3_pred = model3_split.predict(x3_test)
print('The HDI values predicted by the model by passing the x_test variable:', y3_pred)
print('The R square is:', model3_split.score(x3_test,y_test))

# Choosing variables except Gross national income (GNI) per capita
xecpt = data[['Life expectancy at birth', 'Expected years of schooling',
'Mean years of schooling']]
xecpt_train, xecpt_test, y_train,y_test = train_test_split(xecpt, y, test_size =0.25, random_state=1)
xecpt_train
modelecpt_split = LinearRegression()
print(modelecpt_split.fit(xecpt_train, y_train))
# Predict the output by passing the x_test variable
yecpt_pred = modelecpt_split.predict(xecpt_test)
print('The HDI values predicted by the model by passing the x_test variable:', yecpt_pred)
print('The R square is:', modelecpt_split.score(xecpt_test,y_test))